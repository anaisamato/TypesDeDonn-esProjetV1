Doit contenir une description succincte de votre travail.

Exercice 1 :
	La fonction tp_expr va transformer une int expr en un tp expr. Elle aura pour cela besoin de nombreuses fonctions auxiliaires. J'ai essayé
de faire le moins de fonctions auxiliaires possibles pour optimiser le code mais il y en a quand même beaucoup.

	J'ai eu beaucoup de difficultés au début à bien comprendre tous les types et à créer des fonctions qui ne généraient pas d'erreur de types. Il
faut donc beaucoup de fonctions auxiliaires pour parfois convertir des types en d'autres ou juste récupérer un élément d'un type que l'on souhaite.

	Les fonctions retrieve_val (l 52) et retrieve_binop (l 68) se ressemblent beaucoup par endroit, mais je n'ai pas réussi à les rassembler.

	J'ai essayé d'effectuer mes tests sur tous les cas possibles, ou du moins tous les cas auxquels j'ai pensé, en plus de l'expression fournie dans le sujet :
	- un if then else if then else -> IfThenElse(0, Const(0, BoolV true), Const(0, IntV 1), IfThenElse(0, Const(0, BoolV false), Const(0, IntV 1), Const(0, IntV 0)))
		Je trouvais cette forme plus complexe qu'un simple if then else intéressante à tester.
	- un comparateur logique -> BinOp (0, BLogic BLor , Const (0, BoolV true), Const(0, BoolV false))

Exercice 2 :
	Cet exercice a généré beaucoup de fonctions non exhaustives, cependant cela est normal car ceux sont des fonctions qui travaillent uniquement
sur un CallE. Il ne rentrera jamais dans ces fonctions des BinOp par exemple. Ces fonctions sont : transform_del_vardecl (l 87), check_function_type_list (l 94).
De même que d'autres fonctions ne travaillent pas avec les CallE, comme la fonction retrieve_val (l 52).

Là aussi, j'ai eu beaucoup de mal à gérer les différents types, notamment les différences entre les listes de Const et de Vardecl. Il y a donc une fonction de conversion pour ces deux types.




